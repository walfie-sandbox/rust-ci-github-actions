name: Release

on:
  push:
    tags: ["*"]

jobs:
  create-github-release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Generate changelog
      id: changelog
      run: |
        CHANGELOG=$(git log --pretty=format:'* %h %s' | awk 1 ORS='%0A')
        echo -e "::set-output name=changelog::$CHANGELOG"
    - name: Create release
      id: create_release
      if: github.event.ref_type == 'tag'
      uses: actions/create-release@4d1b607
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false

  upload:
    name: Upload ${{ matrix.target }}
    needs: create-github-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        include:
        - os: ubuntu-latest
          target: x86_64-unknown-linux-musl
          archive: tar
        - os: macOS-latest
          target: x86_64-apple-darwin
          archive: tar
        - os: windows-latest
          target: x86_64-pc-windows-msvc
          archive: zip
    steps:
    - uses: actions/checkout@v1
    - name: Install rust
      uses: actions-rs/toolchain@v1.0.3
      with:
        profile: minimal
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
    - name: Build
      run: cargo build --release --all --target ${{ matrix.target }}
    - name: Upload artifacts
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        RELEASE_URL=$(
          echo '${{ github.event.repository.releases_url }}' |
          sed 's|{.*}$|/tags/${{ github.event.ref }}|'
        )

        UPLOAD_BASE_URL=$(
          curl -fsSL -H"Authorization: token $GITHUB_TOKEN" $RELEASE_URL |
          jq -r '.upload_url' |
          sed 's/{?.*}$//'
        )

        cd target/${{ matrix.target }}/release
        EXECUTABLE_PATH="$(find . -maxdepth 1 -type f -perm -u+x | head -n 1)"
        BINARY_NAME="$(basename $EXECUTABLE_PATH .exe)"
        OUTPUT_FILE="$BINARY_NAME-${{ github.event.ref }}-${{ matrix.target }}"

        case "${{ matrix.archive }}" in
          zip)
            OUTPUT_FILE="$OUTPUT_FILE.zip"
            7z a -tzip $OUTPUT_FILE $EXECUTABLE_PATH
            ;;
          *)
            OUTPUT_FILE="$OUTPUT_FILE.tar.gz"
            tar -czvf $OUTPUT_FILE $EXECUTABLE_PATH
            ;;
        esac

        curl -fsSL -XPOST \
          --upload-file $OUTPUT_FILE \
          --header "Authorization: token $GITHUB_TOKEN" \
          --header "Content-Type: application/octet-stream" \
          "$UPLOAD_BASE_URL?name=$OUTPUT_FILE"

