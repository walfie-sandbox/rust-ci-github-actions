name: Release

on:
  create:
    tags: ["*"]

jobs:
  create-github-release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Check GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - name: Create release from tag
      if: github.event.ref_type == 'tag'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        RELEASES_URL=$(echo '${{ github.event.repository.releases_url }}' | sed 's/{.*}$//')
        CHANGELOG=$(git log --pretty=format:'* %h %s' $(git describe --tags --abbrev=0 HEAD^)..HEAD | jq -sR .)

        curl -fsSL -XPOST \
          --header "Authorization: token $GITHUB_TOKEN" \
          --header "Content-Type: application/json" \
          -d "{
            \"tag_name\": \"${{ github.event.ref }}\",
            \"name\": \"${{ github.event.ref }}\",
            \"body\": $CHANGELOG
          }" $RELEASES_URL

  upload:
    name: Upload ${{ matrix.target }}
    needs: create-github-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        include:
        - os: ubuntu-latest
          target: x86_64-unknown-linux-musl
          archive: tar
        - os: macOS-latest
          target: x86_64-apple-darwin
          archive: tar
        - os: windows-latest
          target: x86_64-pc-windows-msvc
          archive: zip
    steps:
    - uses: actions/checkout@v1
    - name: Install rust
      shell: bash
      run: |
        if hash rustup 2>/dev/null; then
          rustup update
        else
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          mv $HOME/.cargo/bin/* /usr/local/bin
        fi

        rustup target add ${{ matrix.target }}
    - name: Build
      run: cargo build --release --all --target ${{ matrix.target }}
    - name: Upload artifacts
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        RELEASE_URL=$(
          echo '${{ github.event.repository.releases_url }}' |
          sed 's|{.*}$|/tags/${{ github.event.ref }}|'
        )

        UPLOAD_BASE_URL=$(
          curl -fsSL -H"Authorization: token $GITHUB_TOKEN" $RELEASE_URL |
          jq -r '.upload_url' |
          sed 's/{?.*}$//'
        )

        cd target/${{ matrix.target }}/release
        EXECUTABLE_PATH="$(find . -maxdepth 1 -type f -perm -u+x | head -n 1)"
        BINARY_NAME="$(basename $EXECUTABLE_PATH .exe)"
        OUTPUT_FILE="$BINARY_NAME-${{ github.event.ref }}-${{ matrix.target }}"

        case "${{ matrix.archive }}" in
          zip)
            OUTPUT_FILE="$OUTPUT_FILE.zip"
            7z a -tzip $OUTPUT_FILE $EXECUTABLE_PATH
            ;;
          *)
            OUTPUT_FILE="$OUTPUT_FILE.tar.gz"
            tar -czvf $OUTPUT_FILE $EXECUTABLE_PATH
            ;;
        esac

        curl -fsSL -XPOST \
          --upload-file $OUTPUT_FILE \
          --header "Authorization: token $GITHUB_TOKEN" \
          --header "Content-Type: application/octet-stream" \
          "$UPLOAD_BASE_URL?name=$OUTPUT_FILE"

